[
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh.\nThis is a .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#header-2",
    "href": "content/01_journal/01_tidyverse.html#header-2",
    "title": "Tidyverse",
    "section": "\n2.1 Header 2",
    "text": "2.1 Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/06_supervised_ML.html",
    "href": "content/01_journal/06_supervised_ML.html",
    "title": "MyLabJournal",
    "section": "",
    "text": "Supervised Machine Learning (2)\nStarting with dowloading libraries\n\n# Standard\nlibrary(tidyverse)\n\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\n# Modeling\nlibrary(parsnip)\nlibrary(tidymodels)\n\n#> ── Attaching packages ────────────────────────────────────── tidymodels 1.1.0 ──\n#> ✔ broom        1.0.4     ✔ rsample      1.1.1\n#> ✔ dials        1.2.0     ✔ tune         1.1.1\n#> ✔ infer        1.0.4     ✔ workflows    1.1.3\n#> ✔ modeldata    1.1.0     ✔ workflowsets 1.0.1\n#> ✔ recipes      1.0.6     ✔ yardstick    1.2.0\n#> ── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n#> ✖ scales::discard() masks purrr::discard()\n#> ✖ dplyr::filter()   masks stats::filter()\n#> ✖ recipes::fixed()  masks stringr::fixed()\n#> ✖ dplyr::lag()      masks stats::lag()\n#> ✖ yardstick::spec() masks readr::spec()\n#> ✖ recipes::step()   masks stats::step()\n#> • Search for functions across packages at https://www.tidymodels.org/find/\n\n# Preprocessing & Sampling\nlibrary(recipes)\nlibrary(rsample)\n\n# Modeling Error Metrics\nlibrary(yardstick)\n\n# Plotting Decision Trees\nlibrary(rpart.plot)\n\n#> Loading required package: rpart\n#> \n#> Attaching package: 'rpart'\n#> \n#> The following object is masked from 'package:dials':\n#> \n#>     prune\n\nlibrary(readr)\n\nGetting and wrangling data\n\nbike_features_tbl <- readRDS(\"06_data\\\\bike_features_tbl.rds\") %>%\n  select(-where(~ all(is.na(.))))\nbike_orderlines_tbl <- readRDS(\"06_data\\\\bike_orderlines.rds\")\n\n\n# Splitting the tibble into training and testing sets\nsplit_obj <- initial_split(bike_features_tbl, prop = 0.7)\ntr_data <- training(split_obj)\ntr_data <- tidyr::drop_na(tr_data)\ntest_data <- testing(split_obj)\n\nCreating the recipe object\n\nbike_recipe <- tr_data %>%\n  recipe(price ~ frame_material + weight + category_2 + Frame + Fork + bike_id, data = tr_data) %>%\n  \n  step_dummy(all_nominal(), -all_outcomes()) %>%\n  prep()\n\nThen let’s build a glmnet model\n\nmodel_glmnet <- linear_reg(mode    = \"regression\", \n                                     penalty = 10, \n                                     mixture = 0.1) %>%\n    set_engine(\"glmnet\") \n\nCreating the workflow to parse everything\n\nbikes_wflow <- \n  workflow() %>% \n  add_model(model_glmnet) %>% \n  add_recipe(bike_recipe)\n\nbikes_fit <- bikes_wflow %>% fit(data = tr_data)\n\nbikes_fit %>% \n  pull_workflow_fit() %>% \n  tidy()\n\n#> Warning: `pull_workflow_fit()` was deprecated in workflows 0.2.3.\n#> ℹ Please use `extract_fit_parsnip()` instead.\n\n\n#> Loading required package: Matrix\n\n\n#> \n#> Attaching package: 'Matrix'\n\n\n#> The following objects are masked from 'package:tidyr':\n#> \n#>     expand, pack, unpack\n\n\n#> Loaded glmnet 4.1-7\n\n\n\n\n  \n\n\n\n\npredict(bikes_fit, test_data)\n\n#> Warning: There are new levels in a factor: Canyon Neuron CF SLX, Canyon Sender\n#> AL, Canyon Strive CFR, Canyon Commuter Design\n\n\n#> Warning: There are new levels in a factor: Canyon F24 CF Disc, Canyon F31 CF\n#> Disc\n\n\n\n\n  \n\n\n\nEvaluating the model\n\npredictions = predict(bikes_fit, test_data)\n\n#> Warning: There are new levels in a factor: Canyon Neuron CF SLX, Canyon Sender\n#> AL, Canyon Strive CFR, Canyon Commuter Design\n\n\n#> Warning: There are new levels in a factor: Canyon F24 CF Disc, Canyon F31 CF\n#> Disc\n\n# Create a yardstick tibble using the true labels and predicted values\nevaluation_data <- tibble::tibble(price = test_data$price, predicted = predictions)"
  },
  {
    "objectID": "content/01_journal/07_autoML_1.html",
    "href": "content/01_journal/07_autoML_1.html",
    "title": "MyLabJournal",
    "section": "",
    "text": "Loading the libraries and data\n\n# Libraries \nlibrary(tidyverse)\n\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(readxl)\nlibrary(skimr)\nlibrary(GGally)\n\n#> Registered S3 method overwritten by 'GGally':\n#>   method from   \n#>   +.gg   ggplot2\n\n# Load Data data definitions\n\npath_data_definitions <- \"07_Data/data_definitions.xlsx\"\ndefinitions_raw_tbl   <- read_excel(path_data_definitions, sheet = 1, col_names = FALSE)\n\n#> New names:\n#> • `` -> `...1`\n#> • `` -> `...2`\n\n# Load Data\n\nemployee_attrition_tbl <- read_csv(\"07_data\\\\datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.txt\")\n\n#> Rows: 1470 Columns: 35\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr  (9): Attrition, BusinessTravel, Department, EducationField, Gender, Job...\n#> dbl (26): Age, DailyRate, DistanceFromHome, Education, EmployeeCount, Employ...\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nemployee_attrition_tbl\n\n\n\n  \n\n\n\nFunction to plot different features\n\n# Create data tibble, to potentially debug the plot_ggpairs function (because it has a data argument)\n\nplot_ggpairs <- function(data, color = NULL, density_alpha = 0.5) {\n    \n    color_expr <- enquo(color)\n    \n    if (rlang::quo_is_null(color_expr)) {\n        \n        g <- data %>%\n            ggpairs(lower = \"blank\") \n        \n    } else {\n        \n        color_name <- quo_name(color_expr)\n        \n        g <- data %>%\n            ggpairs(mapping = aes_string(color = color_name), \n                    lower = \"blank\", legend = 1,\n                    diag = list(continuous = wrap(\"densityDiag\", \n                                                  alpha = density_alpha))) +\n            theme(legend.position = \"bottom\")\n    }\n    \n    return(g)\n    \n}\n\nExplore Features by Category\n\n#   1. Descriptive features: age, gender, marital status \nemployee_attrition_tbl %>%\n    select(Attrition, Age, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome) %>%\n    plot_ggpairs(Attrition)\n\n#> Warning: `aes_string()` was deprecated in ggplot2 3.0.0.\n#> ℹ Please use tidy evaluation idioms with `aes()`.\n#> ℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n\n\n\n\n\n\n\n#   2. Employment features: department, job role, job level\nemployee_attrition_tbl %>%\n    select(Attrition, contains(\"employee\"), contains(\"department\"), contains(\"job\")) %>%\n    plot_ggpairs(Attrition) \n\n#> Warning in cor(x, y): the standard deviation is zero\n\n\n#> Warning in cor(x, y): the standard deviation is zero\n\n#> Warning in cor(x, y): the standard deviation is zero\n\n#> Warning in cor(x, y): the standard deviation is zero\n\n#> Warning in cor(x, y): the standard deviation is zero\n\n#> Warning in cor(x, y): the standard deviation is zero\n\n#> Warning in cor(x, y): the standard deviation is zero\n\n#> Warning in cor(x, y): the standard deviation is zero\n\n#> Warning in cor(x, y): the standard deviation is zero\n\n#> Warning in cor(x, y): the standard deviation is zero\n\n#> Warning in cor(x, y): the standard deviation is zero\n\n#> Warning in cor(x, y): the standard deviation is zero\n\n\n\n\n\n\n\n#   3. Compensation features: HourlyRate, MonthlyIncome, StockOptionLevel \nemployee_attrition_tbl %>%\n    select(Attrition, contains(\"income\"), contains(\"rate\"), contains(\"salary\"), contains(\"stock\")) %>%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n#   4. Survey Results: Satisfaction level, WorkLifeBalance \nemployee_attrition_tbl %>%\n    select(Attrition, contains(\"satisfaction\"), contains(\"life\")) %>%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n#   5. Performance Data: Job Involvment, Performance Rating\nemployee_attrition_tbl %>%\n    select(Attrition, contains(\"performance\"), contains(\"involvement\")) %>%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n#   6. Work-Life Features \nemployee_attrition_tbl %>%\n    select(Attrition, contains(\"overtime\"), contains(\"travel\")) %>%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n#   7. Training and Education \nemployee_attrition_tbl %>%\n    select(Attrition, contains(\"training\"), contains(\"education\")) %>%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n#   8. Time-Based Features: Years at company, years in current role\nemployee_attrition_tbl %>%\n    select(Attrition, contains(\"years\")) %>%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n\nWhat can you deduce about the interaction between Monthly Income and Attrition?\n\nThose that are leaving the company have a higher Monthly Income\nThat those are staying have a lower Monthly Income\nThose that are leaving have a lower Monthly Income\nIt’s difficult to deduce anything based on the visualization\n\nWhat can you deduce about the interaction between Percent Salary Hike and Attrition?\n1.Those that are leaving the company have a higher Percent Salary Hike 2.Those that are staying have a lower Percent Salary Hike 3. Those that are leaving have lower Percent Salary Hike 4. It’s difficult to deduce anything based on the visualization\n\nWhat can you deduce about the interaction between Stock Option Level and Attrition?\n\nThose that are leaving the company have a higher stock option level\nThose that are staying have a higher stock option level\nIt’s difficult to deduce anything based on the visualization\n\nWhat can you deduce about the interaction between Environment Satisfaction and Attrition?\n\nA higher proportion of those leaving have a low environment satisfaction level\nA higher proportion of those leaving have a high environment satisfaction level\nIt’s difficult to deduce anything based on the visualization\n\nWhat can you deduce about the interaction between Work Life Balance and Attrition\n\nThose that are leaving have higher density of 2’s and 3’s\nThose that are staying have a higher density of 2’s and 3’s\nThose that are staying have a lower density of 2’s and 3’s\nIt’s difficult to deduce anything based on the visualization\n\nWhat Can you deduce about the interaction between Job Involvement and Attrition?\n\nThose that are leaving have a lower density of 3’s and 4’s\nThose that are leaving have a lower density of 1’s and 2’s\nThose that are staying have a lower density of 2’s and 3’s\nIt’s difficult to deduce anything based on the visualization\n\nWhat can you deduce about the interaction between Over Time and Attrition?\n\nThe proportion of those leaving that are working Over Time are high compared to those that are not leaving\nThe proportion of those staying that are working Over Time are high compared to those that are not staying\n\nWhat can you deduce about the interaction between Training Times Last Year and Attrition\n\nPeople that leave tend to have more annual trainings\nPeople that leave tend to have less annual trainings\nIt’s difficult to deduce anything based on the visualization\n\nWhat can you deduce about the interaction between Years At Company and Attrition\n\nPeople that leave tend to have more working years at the company\nPeople that leave tend to have less working years at the company\nIt’s difficult to deduce anything based on the visualization\n\nWhat can you deduce about the interaction between Years Since Last Promotion and Attrition?\n\nThose that are leaving have more years since last promotion than those that are staying\nThose that are leaving have fewer years since last promotion than those that are staying\nIt’s difficult to deduce anything based on the visualization"
  },
  {
    "objectID": "content/01_journal/08_AutoML_2.html",
    "href": "content/01_journal/08_AutoML_2.html",
    "title": "MyLabJournal",
    "section": "",
    "text": "#Challenge AutoML 2\nDownloading libraries and data\n\nlibrary(tidyverse)\n\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(h2o)\n\n#> \n#> ----------------------------------------------------------------------\n#> \n#> Your next step is to start H2O:\n#>     > h2o.init()\n#> \n#> For H2O package documentation, ask for help:\n#>     > ??h2o\n#> \n#> After starting H2O, you can use the Web UI at http://localhost:54321\n#> For more information visit https://docs.h2o.ai\n#> \n#> ----------------------------------------------------------------------\n#> \n#> \n#> Attaching package: 'h2o'\n#> \n#> The following objects are masked from 'package:lubridate':\n#> \n#>     day, hour, month, week, year\n#> \n#> The following objects are masked from 'package:stats':\n#> \n#>     cor, sd, var\n#> \n#> The following objects are masked from 'package:base':\n#> \n#>     %*%, %in%, &&, ||, apply, as.factor, as.numeric, colnames,\n#>     colnames<-, ifelse, is.character, is.factor, is.numeric, log,\n#>     log10, log1p, log2, round, signif, trunc\n\nlibrary(skimr)\nlibrary(rsample)\nlibrary(recipes)\n\n#> \n#> Attaching package: 'recipes'\n#> \n#> The following object is masked from 'package:stringr':\n#> \n#>     fixed\n#> \n#> The following object is masked from 'package:stats':\n#> \n#>     step\n\n\nReading data\n\nbackorder_tbl <- read.csv(\"08_data\\\\product_backorder.csv\")\n\nGetting to know data\n\nskim(backorder_tbl)\n\n\nData summary\n\n\nName\nbackorder_tbl\n\n\nNumber of rows\n19053\n\n\nNumber of columns\n23\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n7\n\n\nnumeric\n16\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\npotential_issue\n0\n1\n2\n3\n0\n2\n0\n\n\ndeck_risk\n0\n1\n2\n3\n0\n2\n0\n\n\noe_constraint\n0\n1\n2\n3\n0\n2\n0\n\n\nppap_risk\n0\n1\n2\n3\n0\n2\n0\n\n\nstop_auto_buy\n0\n1\n2\n3\n0\n2\n0\n\n\nrev_stop\n0\n1\n2\n3\n0\n2\n0\n\n\nwent_on_backorder\n0\n1\n2\n3\n0\n2\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\nsku\n0\n1.00\n2059552.76\n663337.65\n1111620\n1510598.00\n1923192.00\n2828574.00\n3284775\n▇▇▆▁▇\n\n\nnational_inv\n0\n1.00\n376.37\n7002.07\n-1440\n3.00\n11.00\n63.00\n730722\n▇▁▁▁▁\n\n\nlead_time\n1078\n0.94\n7.71\n6.78\n0\n4.00\n8.00\n8.00\n52\n▇▂▁▁▁\n\n\nin_transit_qty\n0\n1.00\n48.27\n1466.00\n0\n0.00\n0.00\n0.00\n170920\n▇▁▁▁▁\n\n\nforecast_3_month\n0\n1.00\n182.91\n4304.87\n0\n0.00\n0.00\n9.00\n479808\n▇▁▁▁▁\n\n\nforecast_6_month\n0\n1.00\n344.74\n8406.06\n0\n0.00\n0.00\n20.00\n967776\n▇▁▁▁▁\n\n\nforecast_9_month\n0\n1.00\n497.79\n12180.57\n0\n0.00\n0.00\n30.00\n1418208\n▇▁▁▁▁\n\n\nsales_1_month\n0\n1.00\n56.12\n1544.22\n0\n0.00\n0.00\n5.00\n186451\n▇▁▁▁▁\n\n\nsales_3_month\n0\n1.00\n168.53\n4581.34\n0\n0.00\n1.00\n16.00\n550609\n▇▁▁▁▁\n\n\nsales_6_month\n0\n1.00\n333.53\n9294.57\n0\n0.00\n3.00\n32.00\n1136154\n▇▁▁▁▁\n\n\nsales_9_month\n0\n1.00\n504.26\n14184.15\n0\n0.00\n5.00\n47.00\n1759152\n▇▁▁▁▁\n\n\nmin_bank\n0\n1.00\n48.84\n968.77\n0\n0.00\n0.00\n3.00\n85584\n▇▁▁▁▁\n\n\npieces_past_due\n0\n1.00\n2.31\n110.24\n0\n0.00\n0.00\n0.00\n13824\n▇▁▁▁▁\n\n\nperf_6_month_avg\n0\n1.00\n-6.52\n25.98\n-99\n0.63\n0.82\n0.96\n1\n▁▁▁▁▇\n\n\nperf_12_month_avg\n0\n1.00\n-6.05\n25.18\n-99\n0.65\n0.80\n0.95\n1\n▁▁▁▁▇\n\n\nlocal_bo_qty\n0\n1.00\n0.89\n23.03\n0\n0.00\n0.00\n0.00\n1440\n▇▁▁▁▁\n\n\n\n\n\nlead_time only column to have missing values (6%), lets fill them with average of the lead_time column\n\nbackorder_tbl <- backorder_tbl %>%\n  mutate(lead_time = ifelse(is.na(lead_time), mean(lead_time, na.rm = TRUE), \n                            lead_time)) %>%\n  mutate_if(is.character, as.factor)\n\nProcessing data for h20\n\n# H2O modeling\n\n\n\nset.seed(seed = 1113)\nsplit_obj                       <- rsample::initial_split(backorder_tbl, prop = 0.85)\ntrain_readable_tbl              <- training(split_obj)\ntest_readable_tbl               <- testing(split_obj)\n\nrecipe_obj <- recipe(went_on_backorder ~., data = train_readable_tbl) %>% \n    update_role(sku, new_role = \"id\") %>%\n    step_zv(all_predictors()) %>% \n    prep()\n\ntrain_tbl <- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  <- bake(recipe_obj, new_data = test_readable_tbl)\n\nRunning the h20 analysis\n\n# Modeling\nh2o.init()\n\n#>  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         1 hours 5 minutes \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.4 \n#>     H2O cluster version age:    1 month and 8 days \n#>     H2O cluster name:           H2O_started_from_R_35844_drx718 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   3.14 GB \n#>     H2O cluster total cores:    16 \n#>     H2O cluster allowed cores:  16 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n\n# Split data into a training and a validation data frame\nsplit_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o <- split_h2o[[1]]\nvalid_h2o <- split_h2o[[2]]\ntest_h2o  <- as.h2o(test_tbl)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Set the target and predictors\ny <- \"went_on_backorder\"\nx <- setdiff(names(train_h2o), y)\n\n# Creaeting the models\nautoml_models_h2o <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 45,\n  nfolds            = 10 \n)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |==                                                                    |   2%\n#> 16:00:07.21: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n#> 16:00:07.25: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |=====                                                                 |   7%\n  |                                                                            \n  |========                                                              |  12%\n  |                                                                            \n  |============                                                          |  16%\n  |                                                                            \n  |===============                                                       |  21%\n  |                                                                            \n  |===================                                                   |  28%\n  |                                                                            \n  |=======================                                               |  32%\n  |                                                                            \n  |==========================                                            |  37%\n  |                                                                            \n  |=============================                                         |  42%\n  |                                                                            \n  |=================================                                     |  47%\n  |                                                                            \n  |====================================                                  |  51%\n  |                                                                            \n  |=======================================                               |  56%\n  |                                                                            \n  |===========================================                           |  61%\n  |                                                                            \n  |==============================================                        |  66%\n  |                                                                            \n  |=================================================                     |  70%\n  |                                                                            \n  |=====================================================                 |  75%\n  |                                                                            \n  |========================================================              |  80%\n  |                                                                            \n  |===========================================================           |  85%\n  |                                                                            \n  |==============================================================        |  89%\n  |                                                                            \n  |==================================================================    |  94%\n  |                                                                            \n  |======================================================================| 100%\n\n\nViewing the results on leaderboard\n\n# Best models\nautoml_models_h2o@leaderboard\n\n#>                                                  model_id       auc   logloss\n#> 1                          GBM_4_AutoML_2_20230605_160007 0.9526824 0.1744281\n#> 2 StackedEnsemble_BestOfFamily_2_AutoML_2_20230605_160007 0.9514666 0.1739211\n#> 3    StackedEnsemble_AllModels_3_AutoML_2_20230605_160007 0.9506988 0.2884487\n#> 4 StackedEnsemble_BestOfFamily_3_AutoML_2_20230605_160007 0.9505143 0.1733617\n#> 5    StackedEnsemble_AllModels_2_AutoML_2_20230605_160007 0.9503576 0.1741810\n#> 6                          GBM_2_AutoML_2_20230605_160007 0.9500668 0.1768154\n#>       aucpr mean_per_class_error      rmse        mse\n#> 1 0.7520634            0.1177302 0.2297922 0.05280448\n#> 2 0.7516514            0.1355548 0.2291059 0.05248951\n#> 3 0.7496472            0.1577249 0.2924981 0.08555514\n#> 4 0.7525885            0.1562714 0.2283995 0.05216633\n#> 5 0.7477286            0.1440006 0.2289784 0.05243113\n#> 6 0.7469983            0.1430061 0.2303354 0.05305438\n#> \n#> [18 rows x 7 columns]\n\n# Saving the id of best model\nbest_model_id <- automl_models_h2o@leaderboard %>%\n  as_tibble() %>%\n  slice(1) %>% \n  pull(model_id)\n\nPulling the best model & Saving\n\nh2o.getModel(best_model_id) %>%\n  h2o.saveModel(path = \"08_data\\\\models\")\n\n#> [1] \"C:\\\\Users\\\\35844\\\\Vaihto\\\\ML\\\\ss23-bdml-TurvaKassu\\\\content\\\\01_journal\\\\08_data\\\\models\\\\GBM_4_AutoML_2_20230605_160007\"\n\n\nPredicting went_on_bacorder for testing data\n\n# Loading model\nstacked_ensemble_h2o <- h2o.loadModel(\"08_data\\\\models\\\\StackedEnsemble_BestOfFamily_2_AutoML_1_20230605_154513\")\n\npredictions <- h2o.predict(stacked_ensemble_h2o, newdata = as.h2o(test_tbl))\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntypeof(predictions)\n\n#> [1] \"environment\"\n\npredictions_tbl <- predictions %>% as_tibble()\npredictions_tbl"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "material/Chapter_1_Challenge.html",
    "href": "material/Chapter_1_Challenge.html",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "material/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "material/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %>% glimpse()\n\nRows: 1,225,765\nColumns: 8\n$ symbol   <chr> \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n$ date     <date> 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n$ open     <dbl> 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n$ high     <dbl> 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n$ low      <dbl> 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n$ close    <dbl> 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n$ volume   <dbl> 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n$ adjusted <dbl> 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n# Apply your data transformation skills!\n\n\nsp_500_daily_returns_tbl <- sp_500_prices_tbl %>%\n  select(symbol, date, adjusted) %>%\n  filter(year(date) >= 2018) %>%\n  group_by(symbol) %>%\n  mutate(lagged_adj_price = lag(adjusted, 1))%>%\n  ungroup() %>%\n  mutate(lagged_adj_price = ifelse(is.na(lagged_adj_price), adjusted, lagged_adj_price)) %>%\n  mutate(pct_return = (adjusted - lagged_adj_price) / lagged_adj_price ) %>%\n  select(symbol, date, pct_return)"
  },
  {
    "objectID": "material/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "href": "material/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 2 - Convert to User-Item Format",
    "text": "Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl <- read_rds(\"sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n# A tibble: 141,340 × 3\n   symbol date       pct_return\n   <chr>  <date>          <dbl>\n 1 MSFT   2018-01-03   0.00465 \n 2 MSFT   2018-01-04   0.00880 \n 3 MSFT   2018-01-05   0.0124  \n 4 MSFT   2018-01-08   0.00102 \n 5 MSFT   2018-01-09  -0.000680\n 6 MSFT   2018-01-10  -0.00453 \n 7 MSFT   2018-01-11   0.00296 \n 8 MSFT   2018-01-12   0.0173  \n 9 MSFT   2018-01-16  -0.0140  \n10 MSFT   2018-01-17   0.0203  \n# ℹ 141,330 more rows\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n# Convert to User-Item Format\n\nstock_date_matrix_tbl <- sp_500_daily_returns_tbl %>%\n  mutate(date = as.character(date)) %>%  # Convert the date column to character type\n  spread(date, pct_return, fill = 0)"
  },
  {
    "objectID": "material/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "href": "material/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 3 - Perform K-Means Clustering",
    "text": "Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl <- read_rds(\"stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\nPerform kmeans() with centers = 4 and nstart = 20\nSave the result as kmeans_obj\n\n\n# Create kmeans_obj for 4 centers\nkmeans_obj <- stock_date_matrix_tbl %>%\n  select(-symbol) %>%\n  kmeans(centers = 4, nstart = 20)\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss\nglance(kmeans_obj)\n\n# A tibble: 1 × 4\n  totss tot.withinss betweenss  iter\n  <dbl>        <dbl>     <dbl> <int>\n1  33.6         29.2      4.40     2"
  },
  {
    "objectID": "material/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "href": "material/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 4 - Find the optimal value of K",
    "text": "Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper <- function(center = 3) {\n    stock_date_matrix_tbl %>%\n        select(-symbol) %>%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n# Use purrr to map\nk_means_mapped_tbl <- tibble(centers = 1:30) %>%\n  mutate(k_means = map(centers, kmeans_mapper)) %>%\n  mutate(glance = map(k_means, glance)) %>%\n  unnest(glance)\n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\n\nggplot(k_means_mapped_tbl, aes(centers, tot.withinss)) +\n  geom_point() + \n  geom_line() +\n  labs(title = \"Scree Plot\")\n\n\n\n\n\n\n\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "material/Chapter_1_Challenge.html#step-5---apply-umap",
    "href": "material/Chapter_1_Challenge.html#step-5---apply-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 5 - Apply UMAP",
    "text": "Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n# Apply UMAP\numap_results <- stock_date_matrix_tbl %>%\n  select(-symbol) %>%\n  umap()\n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\nConvert from a matrix data type to a tibble with as_tibble()\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\numap_results_tbl <- umap_results$layout %>%\n  as_tibble() %>%\n  bind_cols(stock_date_matrix_tbl %>% select(symbol), .)\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\nggplot(umap_results_tbl, aes(x = V1, y = V2)) +\n  geom_point(alpha = 0.5) +\n  theme_tq() + \n  labs(title = \"UMAP Projection\")\n\n\n\n\n\n\n\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "material/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "href": "material/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 6 - Combine K-Means and UMAP",
    "text": "Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\numap_results_tbl   <- read_rds(\"umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\n\nk_means_obj <- k_means_mapped_tbl %>%\n  filter(centers == 10) %>%\n  pull(k_means) %>%\n  pluck(1)\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %>% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\n\numap_kmeans_results_tbl <- stock_date_matrix_tbl %>%\n  mutate(cluster = k_means_obj$cluster) %>%\n  select(symbol, cluster) %>%\n  left_join(umap_results_tbl, by=\"symbol\") %>%\n  left_join(sp_500_index_tbl %>% select(symbol, company, sector), by = \"symbol\")\n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\nUse ggplot() mapping V1, V2 and color = .cluster\nAdd the geom_point() geometry with alpha = 0.5\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %>% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\n\nggplot(umap_kmeans_results_tbl, aes(V1, V2, color = as.factor(cluster))) +\n  geom_point(alpha = 0.5) +\n  theme_tq() + \n  \n  labs(title = \"UMAP Projection\")\n\n\n\n\n\n\n\n\nCongratulations! You are done with the 1st challenge!"
  }
]