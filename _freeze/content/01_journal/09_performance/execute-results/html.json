{
  "hash": "f3347c9c04347babfbb7b5210786c055",
  "result": {
    "markdown": "\n### Downloading libraries and data\n\n::: {.cell hash='09_performance_cache/html/unnamed-chunk-1_73da8db76625111b45cfa34918ea2373'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(h2o)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> ----------------------------------------------------------------------\n#> \n#> Your next step is to start H2O:\n#>     > h2o.init()\n#> \n#> For H2O package documentation, ask for help:\n#>     > ??h2o\n#> \n#> After starting H2O, you can use the Web UI at http://localhost:54321\n#> For more information visit https://docs.h2o.ai\n#> \n#> ----------------------------------------------------------------------\n#> \n#> \n#> Attaching package: 'h2o'\n#> \n#> The following objects are masked from 'package:lubridate':\n#> \n#>     day, hour, month, week, year\n#> \n#> The following objects are masked from 'package:stats':\n#> \n#>     cor, sd, var\n#> \n#> The following objects are masked from 'package:base':\n#> \n#>     %*%, %in%, &&, ||, apply, as.factor, as.numeric, colnames,\n#>     colnames<-, ifelse, is.character, is.factor, is.numeric, log,\n#>     log10, log1p, log2, round, signif, trunc\n```\n:::\n\n```{.r .cell-code}\nlibrary(skimr)\nlibrary(rsample)\nlibrary(recipes)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attaching package: 'recipes'\n#> \n#> The following object is masked from 'package:stringr':\n#> \n#>     fixed\n#> \n#> The following object is masked from 'package:stats':\n#> \n#>     step\n```\n:::\n\n```{.r .cell-code}\nlibrary(cowplot)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attaching package: 'cowplot'\n#> \n#> The following object is masked from 'package:lubridate':\n#> \n#>     stamp\n```\n:::\n\n```{.r .cell-code}\nlibrary(glue)\nlibrary(dbplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attaching package: 'dbplyr'\n#> \n#> The following objects are masked from 'package:dplyr':\n#> \n#>     ident, sql\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyr)\n\nh2o.init()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         2 hours 3 minutes \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.4 \n#>     H2O cluster version age:    1 month and 10 days \n#>     H2O cluster name:           H2O_started_from_R_35844_drs368 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   2.72 GB \n#>     H2O cluster total cores:    16 \n#>     H2O cluster allowed cores:  16 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n```\n:::\n:::\n\n\nReading data\n\n::: {.cell hash='09_performance_cache/html/unnamed-chunk-2_1c43cd44ee17334226b7ac2841c14273'}\n\n```{.r .cell-code}\nbackorder_tbl <- read.csv(\"08_data\\\\product_backorder.csv\")\n```\n:::\n\n\n\n### Getting to know data\n\n\n::: {.cell hash='09_performance_cache/html/unnamed-chunk-3_bb89e192a582a818a3c7b5b4dccabb6d'}\n\n```{.r .cell-code}\nskim(backorder_tbl)\n```\n\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |              |\n|:------------------------|:-------------|\n|Name                     |backorder_tbl |\n|Number of rows           |19053         |\n|Number of columns        |23            |\n|_______________________  |              |\n|Column type frequency:   |              |\n|character                |7             |\n|numeric                  |16            |\n|________________________ |              |\n|Group variables          |None          |\n\n\n**Variable type: character**\n\n|skim_variable     | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-----------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|potential_issue   |         0|             1|   2|   3|     0|        2|          0|\n|deck_risk         |         0|             1|   2|   3|     0|        2|          0|\n|oe_constraint     |         0|             1|   2|   3|     0|        2|          0|\n|ppap_risk         |         0|             1|   2|   3|     0|        2|          0|\n|stop_auto_buy     |         0|             1|   2|   3|     0|        2|          0|\n|rev_stop          |         0|             1|   2|   3|     0|        2|          0|\n|went_on_backorder |         0|             1|   2|   3|     0|        2|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable     | n_missing| complete_rate|       mean|        sd|      p0|        p25|        p50|        p75|    p100|hist  |\n|:-----------------|---------:|-------------:|----------:|---------:|-------:|----------:|----------:|----------:|-------:|:-----|\n|sku               |         0|          1.00| 2059552.76| 663337.65| 1111620| 1510598.00| 1923192.00| 2828574.00| 3284775|▇▇▆▁▇ |\n|national_inv      |         0|          1.00|     376.37|   7002.07|   -1440|       3.00|      11.00|      63.00|  730722|▇▁▁▁▁ |\n|lead_time         |      1078|          0.94|       7.71|      6.78|       0|       4.00|       8.00|       8.00|      52|▇▂▁▁▁ |\n|in_transit_qty    |         0|          1.00|      48.27|   1466.00|       0|       0.00|       0.00|       0.00|  170920|▇▁▁▁▁ |\n|forecast_3_month  |         0|          1.00|     182.91|   4304.87|       0|       0.00|       0.00|       9.00|  479808|▇▁▁▁▁ |\n|forecast_6_month  |         0|          1.00|     344.74|   8406.06|       0|       0.00|       0.00|      20.00|  967776|▇▁▁▁▁ |\n|forecast_9_month  |         0|          1.00|     497.79|  12180.57|       0|       0.00|       0.00|      30.00| 1418208|▇▁▁▁▁ |\n|sales_1_month     |         0|          1.00|      56.12|   1544.22|       0|       0.00|       0.00|       5.00|  186451|▇▁▁▁▁ |\n|sales_3_month     |         0|          1.00|     168.53|   4581.34|       0|       0.00|       1.00|      16.00|  550609|▇▁▁▁▁ |\n|sales_6_month     |         0|          1.00|     333.53|   9294.57|       0|       0.00|       3.00|      32.00| 1136154|▇▁▁▁▁ |\n|sales_9_month     |         0|          1.00|     504.26|  14184.15|       0|       0.00|       5.00|      47.00| 1759152|▇▁▁▁▁ |\n|min_bank          |         0|          1.00|      48.84|    968.77|       0|       0.00|       0.00|       3.00|   85584|▇▁▁▁▁ |\n|pieces_past_due   |         0|          1.00|       2.31|    110.24|       0|       0.00|       0.00|       0.00|   13824|▇▁▁▁▁ |\n|perf_6_month_avg  |         0|          1.00|      -6.52|     25.98|     -99|       0.63|       0.82|       0.96|       1|▁▁▁▁▇ |\n|perf_12_month_avg |         0|          1.00|      -6.05|     25.18|     -99|       0.65|       0.80|       0.95|       1|▁▁▁▁▇ |\n|local_bo_qty      |         0|          1.00|       0.89|     23.03|       0|       0.00|       0.00|       0.00|    1440|▇▁▁▁▁ |\n:::\n:::\n\n\nlead_time only column to have missing values (6%), lets fill them with\naverage of the lead_time column\n\n::: {.cell hash='09_performance_cache/html/unnamed-chunk-4_067806849f814e9bde781ebe68c8f369'}\n\n```{.r .cell-code}\nbackorder_tbl <- backorder_tbl %>%\n  mutate(lead_time = ifelse(is.na(lead_time), mean(lead_time, na.rm = TRUE), \n                            lead_time)) %>%\n  mutate_if(is.character, as.factor)\n```\n:::\n\n\n\n\n\n### Processing data for h20\n\n::: {.cell hash='09_performance_cache/html/unnamed-chunk-5_d7c29b7d4cf52db8e59fb8b384d7b08a'}\n\n```{.r .cell-code}\n# H2O modeling\n\n\n\nset.seed(seed = 1113)\nsplit_obj                       <- rsample::initial_split(backorder_tbl, prop = 0.85)\ntrain_readable_tbl              <- training(split_obj)\ntest_readable_tbl               <- testing(split_obj)\n\nrecipe_obj <- recipe(went_on_backorder ~., data = train_readable_tbl) %>% \n    update_role(sku, new_role = \"id\") %>%\n    step_zv(all_predictors()) %>% \n    prep()\n\ntrain_tbl <- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  <- bake(recipe_obj, new_data = test_readable_tbl)\n```\n:::\n\n\n\n\n### Running the h20 analysis\n\n::: {.cell hash='09_performance_cache/html/unnamed-chunk-6_483eefa2b6d5d556ad6a4d00a0e92d0d'}\n\n```{.r .cell-code}\n# Modeling\nh2o.init()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         2 hours 3 minutes \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.4 \n#>     H2O cluster version age:    1 month and 10 days \n#>     H2O cluster name:           H2O_started_from_R_35844_drs368 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   2.72 GB \n#>     H2O cluster total cores:    16 \n#>     H2O cluster allowed cores:  16 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n```\n:::\n\n```{.r .cell-code}\n# Split data into a training and a validation data frame\nsplit_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\ntrain_h2o <- split_h2o[[1]]\nvalid_h2o <- split_h2o[[2]]\ntest_h2o  <- as.h2o(test_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\n# Set the target and predictors\ny <- \"went_on_backorder\"\nx <- setdiff(names(train_h2o), y)\n\n# Creating the models\nautoml_models_h2o <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 45,\n  nfolds            = 10 \n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |==                                                                    |   2%\n#> 17:23:50.338: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n#> 17:23:50.340: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |=====                                                                 |   8%\n  |                                                                            \n  |=========                                                             |  12%\n  |                                                                            \n  |============                                                          |  17%\n  |                                                                            \n  |===============                                                       |  22%\n  |                                                                            \n  |===================                                                   |  27%\n  |                                                                            \n  |======================                                                |  32%\n  |                                                                            \n  |==========================                                            |  37%\n  |                                                                            \n  |=============================                                         |  42%\n  |                                                                            \n  |=================================                                     |  47%\n  |                                                                            \n  |====================================                                  |  52%\n  |                                                                            \n  |========================================                              |  56%\n  |                                                                            \n  |===========================================                           |  61%\n  |                                                                            \n  |==============================================                        |  66%\n  |                                                                            \n  |===================================================                   |  73%\n  |                                                                            \n  |======================================================                |  77%\n  |                                                                            \n  |=========================================================             |  82%\n  |                                                                            \n  |=============================================================         |  87%\n  |                                                                            \n  |================================================================      |  92%\n  |                                                                            \n  |====================================================================  |  97%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n:::\n\n\n### Viewing the results on leaderboard\n\n\n::: {.cell hash='09_performance_cache/html/unnamed-chunk-7_02073411faab837aeaa40fc35bb581ea'}\n\n```{.r .cell-code}\n# Best models\nautoml_models_h2o@leaderboard\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>                                                  model_id       auc   logloss\n#> 1             GBM_grid_1_AutoML_5_20230607_172350_model_1 0.9509919 0.1741134\n#> 2                          GBM_4_AutoML_5_20230607_172350 0.9502108 0.1765874\n#> 3    StackedEnsemble_AllModels_2_AutoML_5_20230607_172350 0.9498547 0.1747517\n#> 4 StackedEnsemble_BestOfFamily_3_AutoML_5_20230607_172350 0.9493135 0.1749148\n#> 5    StackedEnsemble_AllModels_1_AutoML_5_20230607_172350 0.9492106 0.1757899\n#> 6 StackedEnsemble_BestOfFamily_2_AutoML_5_20230607_172350 0.9482000 0.1766086\n#>       aucpr mean_per_class_error      rmse        mse\n#> 1 0.7545018            0.1891362 0.2279886 0.05197881\n#> 2 0.7411550            0.1479482 0.2299109 0.05285900\n#> 3 0.7426878            0.1445209 0.2292313 0.05254701\n#> 4 0.7411060            0.1399616 0.2287737 0.05233742\n#> 5 0.7408792            0.1436641 0.2298478 0.05283002\n#> 6 0.7392260            0.1525689 0.2296710 0.05274878\n#> \n#> [19 rows x 7 columns]\n```\n:::\n\n```{.r .cell-code}\n# Saving the id of best model\nbest_model_id <- automl_models_h2o@leaderboard %>%\n  as_tibble() %>%\n  slice(1) %>% \n  pull(model_id)\n```\n:::\n\n\n### Pulling the best model & Saving\n\n\n::: {.cell hash='09_performance_cache/html/unnamed-chunk-8_6aa43e0a959c996e478fe1370b2d1bb4'}\n\n```{.r .cell-code}\nh2o.getModel(best_model_id) %>%\n  h2o.saveModel(path = \"08_data\\\\models\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"C:\\\\Users\\\\35844\\\\Vaihto\\\\ML\\\\ss23-bdml-TurvaKassu\\\\content\\\\01_journal\\\\08_data\\\\models\\\\GBM_grid_1_AutoML_5_20230607_172350_model_1\"\n```\n:::\n:::\n\n\n\n# Challenge Performance measurements\n\n### Visualizing the leaderboard\n\nWrangling data\n\n::: {.cell hash='09_performance_cache/html/unnamed-chunk-9_2f4f61caf485297872b8a1c9235c6eff'}\n\n```{.r .cell-code}\ndata_transformed_tbl <- automl_models_h2o@leaderboard %>%\n        as_tibble() %>%\n        select(-c(aucpr, mean_per_class_error, rmse, mse)) %>% \n        mutate(model_type = str_extract(model_id, \"[^_]+\")) %>%\n        slice(1:15) %>% \n        rownames_to_column(var = \"rowname\") %>%\n        \n        # Reordering factors\n        mutate(\n          model_id   = as_factor(model_id) %>% reorder(auc),\n          model_type = as_factor(model_type)\n          ) %>% \n          pivot_longer(cols = -c(model_id, model_type, rowname), \n                       names_to = \"key\", \n                       values_to = \"value\", \n                       names_transform = list(key = forcats::fct_inorder)\n                       ) %>% \n        mutate(model_id = paste0(rowname, \". \", model_id) %>% as_factor() %>% fct_rev())\n```\n:::\n\n\n\nPlotting leaderboard\n\n\n::: {.cell hash='09_performance_cache/html/unnamed-chunk-10_ab0b6cd899eed973342a0e4cb5e4cc40'}\n\n```{.r .cell-code}\ndata_transformed_tbl %>%\n        ggplot(aes(value, model_id, color = model_type)) +\n        geom_point(size = 3) +\n        geom_label(aes(label = round(value, 2), hjust = \"inward\")) +\n        \n        # Facet to break out logloss and auc\n        facet_wrap(~ key, scales = \"free_x\") +\n        labs(title = \"Leaderboard Metrics\",\n             subtitle = paste0(\"Ordered by: \", \"auc\"),\n             y = \"Model Postion, Model ID\", x = \"\") + \n        theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](09_performance_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nLets tune the GBM model that scored the third best score\n\n### Tuning the Stacked Ensemble model with grid search\n\n\n\n::: {.cell hash='09_performance_cache/html/unnamed-chunk-11_36c6afea728958a71b05708903ca657b'}\n\n```{.r .cell-code}\nhyper_params <- list(\n  ntrees = c(50, 100, 150),\n  max_depth = c(3, 5, 7),\n  learn_rate = c(0.1, 0.01, 0.001)\n)\n\n# Create the grid of GBM models\ngrid <- h2o.grid(\n  algorithm = \"gbm\",\n  grid_id = \"gbm_grid\",\n  hyper_params = hyper_params,\n  training_frame = train_h2o,\n  validation_frame = valid_h2o,\n  y = \"went_on_backorder\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n:::\n\nLet's test the model\n\n::: {.cell hash='09_performance_cache/html/unnamed-chunk-12_145a0d2015a1ca6c0a53d3385c5ef090'}\n\n```{.r .cell-code}\ngrid\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> H2O Grid Details\n#> ================\n#> \n#> Grid ID: gbm_grid \n#> Used hyper parameters: \n#>   -  learn_rate \n#>   -  max_depth \n#>   -  ntrees \n#> Number of models: 81 \n#> Number of failed models: 0 \n#> \n#> Hyper-Parameter Search Summary: ordered by increasing logloss\n#>   learn_rate max_depth    ntrees         model_ids logloss\n#> 1    0.10000   7.00000 100.00000 gbm_grid_model_16 0.17802\n#> 2    0.10000   7.00000 100.00000 gbm_grid_model_43 0.17802\n#> 3    0.10000   7.00000 100.00000 gbm_grid_model_70 0.17802\n#> 4    0.10000   7.00000 150.00000 gbm_grid_model_25 0.17955\n#> 5    0.10000   7.00000 150.00000 gbm_grid_model_52 0.17955\n#> \n#> ---\n#>    learn_rate max_depth   ntrees         model_ids logloss\n#> 76    0.00100   5.00000 50.00000 gbm_grid_model_33 0.35719\n#> 77    0.00100   5.00000 50.00000  gbm_grid_model_6 0.35719\n#> 78    0.00100   5.00000 50.00000 gbm_grid_model_60 0.35719\n#> 79    0.00100   3.00000 50.00000  gbm_grid_model_3 0.36027\n#> 80    0.00100   3.00000 50.00000 gbm_grid_model_30 0.36027\n#> 81    0.00100   3.00000 50.00000 gbm_grid_model_57 0.36027\n```\n:::\n\n```{.r .cell-code}\nh2o.getGrid(grid_id = \"gbm_grid\", sort_by = \"auc\", decreasing = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> H2O Grid Details\n#> ================\n#> \n#> Grid ID: gbm_grid \n#> Used hyper parameters: \n#>   -  learn_rate \n#>   -  max_depth \n#>   -  ntrees \n#> Number of models: 81 \n#> Number of failed models: 0 \n#> \n#> Hyper-Parameter Search Summary: ordered by decreasing auc\n#>   learn_rate max_depth    ntrees         model_ids     auc\n#> 1    0.10000   7.00000 100.00000 gbm_grid_model_16 0.94604\n#> 2    0.10000   7.00000 100.00000 gbm_grid_model_43 0.94604\n#> 3    0.10000   7.00000 100.00000 gbm_grid_model_70 0.94604\n#> 4    0.10000   7.00000 150.00000 gbm_grid_model_25 0.94547\n#> 5    0.10000   7.00000 150.00000 gbm_grid_model_52 0.94547\n#> \n#> ---\n#>    learn_rate max_depth    ntrees         model_ids     auc\n#> 76    0.00100   3.00000 100.00000 gbm_grid_model_12 0.69288\n#> 77    0.00100   3.00000  50.00000  gbm_grid_model_3 0.69288\n#> 78    0.00100   3.00000  50.00000 gbm_grid_model_30 0.69288\n#> 79    0.00100   3.00000 100.00000 gbm_grid_model_39 0.69288\n#> 80    0.00100   3.00000  50.00000 gbm_grid_model_57 0.69288\n#> 81    0.00100   3.00000 100.00000 gbm_grid_model_66 0.69288\n```\n:::\n:::\n\n\nIt seems that the logloss of the best model was few fractions better, but\nthe auc was equally worse. Let's use the Stacked Ensemble model in the \nfuture visualisazions.\n\n\n### Finding the optimal threshold \n\n\n::: {.cell hash='09_performance_cache/html/unnamed-chunk-13_cd9c2d028e6c42ac0214b0af14b3d5b3'}\n\n```{.r .cell-code}\nperformance_h2o <- h2o.performance(h2o.getModel(best_model_id), newdata = as.h2o(test_tbl))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\nperformance_tbl <- performance_h2o %>%\n    h2o.metric() %>%\n    as_tibble()\n```\n:::\n\n\n\n\n\nLets set a custom theme\n\n\n::: {.cell hash='09_performance_cache/html/unnamed-chunk-14_9352077bb98653188a45fe85b998ed95'}\n\n```{.r .cell-code}\ntheme_new <- theme(\n      legend.position  = \"bottom\",\n      legend.key       = element_blank(),\n      panel.background = element_rect(fill   = \"transparent\"),\n      panel.border     = element_rect(color = \"black\", fill = NA),\n      panel.grid.major = element_line(color = \"grey\", linewidth = 0.333)\n      ) \n```\n:::\n\n\n\nPlotting the optimal threshold with best F1-score\n\n\n::: {.cell hash='09_performance_cache/html/unnamed-chunk-15_96dc33dfda15399fe9192b0805b2649c'}\n\n```{.r .cell-code}\nperformance_tbl %>%\n    filter(f1 == max(f1))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"threshold\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"f1\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"f2\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"f0point5\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"accuracy\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"precision\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"recall\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"specificity\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"absolute_mcc\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"min_per_class_accuracy\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"mean_per_class_accuracy\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"tns\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"fns\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"fps\"],\"name\":[14],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"tps\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"tnr\"],\"name\":[16],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"fnr\"],\"name\":[17],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"fpr\"],\"name\":[18],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"tpr\"],\"name\":[19],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"idx\"],\"name\":[20],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"0.4544382\",\"2\":\"0.6978193\",\"3\":\"0.6690562\",\"4\":\"0.7291667\",\"5\":\"0.9321204\",\"6\":\"0.7516779\",\"7\":\"0.6511628\",\"8\":\"0.9705648\",\"9\":\"0.6619633\",\"10\":\"0.6511628\",\"11\":\"0.8108638\",\"12\":\"2440\",\"13\":\"120\",\"14\":\"74\",\"15\":\"224\",\"16\":\"0.9705648\",\"17\":\"0.3488372\",\"18\":\"0.02943516\",\"19\":\"0.6511628\",\"20\":\"156\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\nperformance_tbl %>%\n    ggplot(aes(x = threshold)) +\n    geom_line(aes(y = precision), color = \"blue\", size = 1) +\n    geom_line(aes(y = recall), color = \"red\", size = 1) +\n    \n    # Insert line where precision and recall are harmonically optimized\n    geom_vline(xintercept = h2o.find_threshold_by_max_metric(performance_h2o, \"f1\")) +\n    labs(title = \"Precision vs Recall\", y = \"value\") +\n    theme_new\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#> ℹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](09_performance_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n### ROC Plot\n\n\n::: {.cell hash='09_performance_cache/html/unnamed-chunk-16_6614fcc4da75a8c3064c11c66ea28284'}\n\n```{.r .cell-code}\nh2o.init()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         2 hours 19 minutes \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.4 \n#>     H2O cluster version age:    1 month and 10 days \n#>     H2O cluster name:           H2O_started_from_R_35844_drs368 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   2.86 GB \n#>     H2O cluster total cores:    16 \n#>     H2O cluster allowed cores:  16 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n```\n:::\n\n```{.r .cell-code}\n# Plot the ROC curve\nroc_p <- plot(performance_h2o, type = \"roc\", main = 'roc')\n```\n\n::: {.cell-output-display}\n![](09_performance_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n### Precission VS Recall\n\n\n::: {.cell hash='09_performance_cache/html/unnamed-chunk-17_df8933fac9778c17190e61a63dfe0ca4'}\n\n```{.r .cell-code}\n# Plot the Precision-Recall curve\npr_p <- plot(performance_h2o, type = \"pr\", main = \"Precision-Recall Curve\", xlab = \"Recall\", ylab = \"Precision\")\n```\n\n::: {.cell-output-display}\n![](09_performance_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n### Gain & Lift plots\n\n\n::: {.cell hash='09_performance_cache/html/unnamed-chunk-18_9940e6eb10b652e2ecc7a4ff919c2ca5'}\n\n```{.r .cell-code}\ngain_lift_tbl <- performance_h2o %>%\n    h2o.gainsLift() %>%\n    as.tibble()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#> ℹ Please use `as_tibble()` instead.\n#> ℹ The signature and semantics have changed, see `?as_tibble`.\n```\n:::\n\n```{.r .cell-code}\n## Gain Chart\n\ngain_transformed_tbl <- gain_lift_tbl %>% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n    select(-contains(\"lift\")) %>%\n    mutate(baseline = cumulative_data_fraction) %>%\n    rename(gain     = cumulative_capture_rate) %>%\n    # prepare the data for the plotting (for the color and group aesthetics)\n    pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\n\ngain_p <- gain_transformed_tbl %>%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1.5) +\n    labs(\n        title = \"Gain Chart\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Gain\"\n    ) +\n    theme_new\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#> ℹ Please use `linewidth` instead.\n```\n:::\n\n```{.r .cell-code}\ngain_p\n```\n\n::: {.cell-output-display}\n![](09_performance_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n\n```{.r .cell-code}\n## Lift Chart\nlift_transformed_tbl <- gain_lift_tbl %>% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n    select(-contains(\"capture\")) %>%\n    mutate(baseline = 1) %>%\n    rename(lift = cumulative_lift) %>%\n    pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\n\nlift_p <- lift_transformed_tbl %>%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1.5) +\n    labs(\n        title = \"Lift Chart\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Lift\"\n    ) +\n    theme_new\n\nlift_p\n```\n\n::: {.cell-output-display}\n![](09_performance_files/figure-html/unnamed-chunk-18-2.png){width=672}\n:::\n:::\n\n\n### Dashboard with cowplot\n\n\n::: {.cell hash='09_performance_cache/html/unnamed-chunk-19_fc79e65c34b6cd6b20ff0cc2fa24a256'}\n\n```{.r .cell-code}\n# Combine plots\np <- cowplot::plot_grid(roc_p, pr_p, gain_p,  lift_p, ncol = 2)\n\n# Title\np_title <- ggdraw() + \n        draw_label(\"H2O Model Metrics\", size = 18, fontface = \"bold\", \n                   color = \"#2C3E50\")\n\n# Combine everything\nret <- plot_grid(p_title,  p,\n                 ncol = 1, rel_heights = c(0.05, 0.05, 1, 0.05 * 4))\n\nret\n```\n\n::: {.cell-output-display}\n![](09_performance_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}