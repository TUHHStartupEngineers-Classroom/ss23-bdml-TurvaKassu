#Challenge AutoML 2

### Downloading libraries and data
```{r}
library(tidyverse)
library(h2o)
library(skimr)
library(rsample)
library(recipes)
library(cowplot)
library(glue)
library(dbplyr)
library(tidyr)

h2o.init()
```

Reading data
```{r}
backorder_tbl <- read.csv("08_data\\product_backorder.csv")
```


### Getting to know data

```{r}
skim(backorder_tbl)
```

lead_time only column to have missing values (6%), lets fill them with
average of the lead_time column
```{r}
backorder_tbl <- backorder_tbl %>%
  mutate(lead_time = ifelse(is.na(lead_time), mean(lead_time, na.rm = TRUE), 
                            lead_time)) %>%
  mutate_if(is.character, as.factor)
```




### Processing data for h20
```{r}
# H2O modeling



set.seed(seed = 1113)
split_obj                       <- rsample::initial_split(backorder_tbl, prop = 0.85)
train_readable_tbl              <- training(split_obj)
test_readable_tbl               <- testing(split_obj)

recipe_obj <- recipe(went_on_backorder ~., data = train_readable_tbl) %>% 
    update_role(sku, new_role = "id") %>%
    step_zv(all_predictors()) %>% 
    prep()

train_tbl <- bake(recipe_obj, new_data = train_readable_tbl)
test_tbl  <- bake(recipe_obj, new_data = test_readable_tbl)
```



### Running the h20 analysis
```{r}
# Modeling
h2o.init()

# Split data into a training and a validation data frame
split_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)
train_h2o <- split_h2o[[1]]
valid_h2o <- split_h2o[[2]]
test_h2o  <- as.h2o(test_tbl)

# Set the target and predictors
y <- "went_on_backorder"
x <- setdiff(names(train_h2o), y)

# Creating the models
automl_models_h2o <- h2o.automl(
  x = x,
  y = y,
  training_frame    = train_h2o,
  validation_frame  = valid_h2o,
  leaderboard_frame = test_h2o,
  max_runtime_secs  = 45,
  nfolds            = 10 
)
```

### Viewing the results on leaderboard

```{r}
# Best models
automl_models_h2o@leaderboard

# Saving the id of best model
best_model_id <- automl_models_h2o@leaderboard %>%
  as_tibble() %>%
  slice(1) %>% 
  pull(model_id)
```

### Pulling the best model & Saving

```{r}
h2o.getModel(best_model_id) %>%
  h2o.saveModel(path = "08_data\\models")
```

### Predicting went_on_backorder for testing data

```{r}
# Loading model
stacked_ensemble_h2o <- h2o.loadModel("08_data\\models\\StackedEnsemble_BestOfFamily_2_AutoML_1_20230605_154513")

predictions <- h2o.predict(stacked_ensemble_h2o, newdata = as.h2o(test_tbl))

typeof(predictions)

predictions_tbl <- predictions %>% as_tibble()
predictions_tbl
```




















